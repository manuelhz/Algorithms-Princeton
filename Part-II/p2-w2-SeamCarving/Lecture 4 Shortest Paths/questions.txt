1) Which version of the shortest path problem does the SP API represent?

a)Single-source and single-sink: find the shortest path from s to t.
->b)Single-source: find the shortest paths from s to every vertex.
Correct
The API requires the algorithm to compute the shortest path from s to every other vertex. 

The single-source single-sink problem is a special case. If you reverse the digraph, you can solve the single-sink version of the problem (by interchanging the roles of s and t). The all-pairs problem is a generalization where you solve the single-source version of the problem for every vertex.

c)Single-sink: find the shortest paths from every vertex to t.
d)All-pairs: find the shortest paths between every ordered pair of vertices.

2) Let e = v → w be an edge with weight 17.0. Suppose that during the generic shortest paths algorithm, distTo[v] = ∞ and distTo[w] = 15.0. What will distTo[w] be after calling relax(e) ?



a) the program will encounter a Java runtime exception

-> b) 15.0
Correct
If distTo[v] = ∞, then relaxing any edge pointing from v will have no effect since, in Java (and IEEE floating point), ∞ + x = ∞ unless x is −∞ or NaN.

c) 17.0

d) ∞

3) What is the order of growth of the running time of Dijkstra's algorithm using a binary heap? Assume that all vertices are reachable from the source.

a) V
b) E
c) V^2
->d) E*log(V)
The bottleneck is the heap operations. There are at most V insert, V delete-min, and E dec rease-key operations. Each operation is logarithmic in the size of the binary heap, which is at most V.

4) The topological sort algorithm computes the shortest-paths tree in an edge-weighted DAG in time proportional to _____________.

a) E
Incorrect
See slide 43.

b) V

->c) E + V
It process the VV vertices in topological order; It relaxes each of the EE edges exactly once.

d) ElogV

5) The dynamic programming algorithm computes a shortest-paths tree in any edge-weighted digraph with no negative cycles in time proportional to ___________.

a) V

b) E

c) E+V
see slide 63

-> d) EV
There are V passes; each passes relaxes each of the E edges. So, this is the both the best-case and worst-case running time of the dynamic programming algorithm.
The FIFO-queue-based version has the same EV worst-case running time but its best-case running time improves to E+V.
