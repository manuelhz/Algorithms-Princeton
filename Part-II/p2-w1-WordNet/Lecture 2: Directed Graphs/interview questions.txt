1.
Question 1
Shortest directed cycle. Given a digraph G, design an efficient algorithm to find a directed cycle with the minimum number of edges (or report that the graph is acyclic). The running time of your algorithm should be at most proportional to V(E + V)V(E+V) and use space proportional to E + VE+V, where VV is the number of vertices and EE is the number of edges.
https://stackoverflow.com/questions/51006682/how-to-find-the-shortest-directed-cycle-in-a-directed-graph
https://algs4.cs.princeton.edu/42digraph/ShortestDirectedCycle.java.html
Hint: run BFS from each vertex.

2.
Question 2
Hamiltonian path in a DAG. Given a directed acyclic graph, design a linear-time algorithm to determine whether it has a Hamiltonian path (a simple path that visits every vertex), and if so, find one.
https://stackoverflow.com/questions/16124844/algorithm-for-finding-a-hamiltonian-path-in-a-dag
Hint: topological sort.

3.
Question 3
Reachable vertex.

DAG: Design a linear-time algorithm to determine whether a DAG has a vertex that is reachable from every other vertex, and if so, find one.
Digraph: Design a linear-time algorithm to determine whether a digraph has a vertex that is reachable from every other vertex, and if so, find one.

https://stackoverflow.com/questions/15716318/linear-time-algorithm-to-determine-whether-a-dag-has-a-vertex-reachable-from-eve

Hint (DAG): compute the outdegree of each vertex.
Hint (digraph): compute the strong components and look at the kernel DAG (the digraph that results when you contract each strong component to a single vertex).
