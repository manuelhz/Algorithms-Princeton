1)Suppose that you are inserting a new key into a 2–3 tree. Under which one of the following scenarios must the height of the 2–3 tree increase by one?

a)When the number of keys equals one less than a power of 2
b)When the number of nodes equals one less than a power of 2
c)When the final node on the search path from the root is a 3-node
->d)When every node on the search path from the root is a 3-node
Correct
The height of a 2–3 tree increases only when the root node splits, and this happens only when every node on the search path from the root to the leaf where the new key should be inserted is a 3-node.

2)Suppose that you left rotate the node containing E in the BST below. Which is the level-order traversal of the resulting red–black BST?
(red-black.jpg)
a)R E X C M S Y A H P F
b)R M X E H S Y C F P A
->c)R M X E P S Y C H A F
Correct
Here is a drawing of the resulting red–black BST:
(red-black-sol.jpg)
d)R C X A E S Y M H P F

3)Suppose that you insert n keys in ascending order into a red–black BST. What is the height of the resulting tree?

a)constant
->b)logarithmic
Correct
The height of any red–black BST on nn keys (regardless of the order of insertion) is guaranteed to be between log(2)n and 2log(2)n.
c)linear
Incorrect
In the worst case, the height of a red–black BST is logarithmic, not linear.
d)linearithmic
Incorrect
The height of any binary tree on nn nodes is at most n-1.

4)How many probes does a search in a B-tree of order mm with nn keys require in the worst case?
a)constant
b)log(m)n
c)log(m/2)n
Correct
This is the worst-case height, when every node has m/2 children.
d)log(2)n
